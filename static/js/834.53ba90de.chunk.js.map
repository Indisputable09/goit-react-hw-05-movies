{"version":3,"file":"static/js/834.53ba90de.chunk.js","mappings":"qQA8BA,EA1BgB,WACZ,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QASR,OAPAE,EAAAA,EAAAA,YAAU,YACN,mCAAC,qGAC6BC,EAAAA,EAAAA,IAAWH,GADxC,OACSI,EADT,OAEGL,EAAWK,GAFd,2CAAD,sDAIH,GAAE,CAACJ,KAGA,wBACwB,IAAnBF,EAAQO,OAAeP,EAAQQ,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/C,OACI,2BACI,qCAAaD,MACb,uBAAIC,MAFCF,EAKhB,KAAI,sEAGhB,C,oOC3BKG,EAAU,mCACVC,EAAa,QAGnBC,IAAAA,SAAAA,QAAA,gCAEO,IAAMC,EAAkB,mCAAG,6GAEPD,IAAAA,IAAA,mBAAsBD,EAAtB,YANP,OAM0D,CACxEG,OAAQ,CACNC,QAASL,KAJiB,cAExBM,EAFwB,yBAOvBA,EAASC,KAAKC,SAPS,gCAS9BC,QAAQC,IAAR,MAT8B,yDAAH,qDAalBC,EAAY,mCAAG,WAAMrB,GAAN,yFAElBsB,EAAKC,OAAOvB,GAFM,SAGDY,IAAAA,IAAA,gBAAmBU,GAAM,CAC9CR,OAAQ,CACNC,QAASL,KALW,cAGlBM,EAHkB,yBAQjBA,EAASC,MARQ,gCAUxBE,QAAQC,IAAR,MAVwB,yDAAH,sDAcZI,EAAS,mCAAG,6GAAOC,EAAP,+BAAgB,GAAhB,kBAEEb,IAAAA,IAAA,gBAAmBD,EAAnB,SAAsC,CAC3DG,OAAQ,CACNC,QAASL,KAJQ,cAEfM,EAFe,OAOfU,EAAaV,EAASC,KAAKQ,OAC3BE,EAAcD,EAAWE,QAAO,SAACC,EAAeC,GAIpD,OAHIL,EAAOM,SAASD,EAAQvB,KAC1BsB,EAAcG,KAAKF,EAAQG,MAEtBJ,CACR,GAAE,IAbkB,kBAcdF,EAAYO,KAAK,OAdH,kCAgBrBf,QAAQC,IAAR,MAhBqB,0DAAH,qDAoBTe,EAAO,mCAAG,WAAM5B,GAAN,gGAEIK,IAAAA,IAAA,gBAAmBL,EAAnB,YAAiC,CACtDO,OAAQ,CACNC,QAASL,KAJM,cAEbM,EAFa,yBAOZA,EAASC,KAAKmB,MAPF,gCASnBjB,QAAQC,IAAR,MATmB,yDAAH,sDAaPjB,EAAU,mCAAG,WAAMI,GAAN,gGAECK,IAAAA,IAAA,gBAAmBL,EAAnB,YAAiC,CACtDO,OAAQ,CACNC,QAASL,KAJS,cAEhBM,EAFgB,yBAOfA,EAASC,KAAKC,SAPC,gCAStBC,QAAQC,IAAR,MATsB,yDAAH,sDAaViB,EAAgB,mCAAG,WAAMC,GAAN,gGAEL1B,IAAAA,IAAA,eAA0B,CAC/CE,OAAQ,CACNC,QAASL,EACT4B,MAAAA,KALwB,cAEtBtB,EAFsB,yBAQrBA,EAASC,KAAKC,SARO,gCAU5BC,QAAQC,IAAR,MAV4B,yDAAH,qD","sources":["components/pages/Reviews/Reviews.jsx","components/services/getMoviesAndInfo.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getReviews } from \"components/services/getMoviesAndInfo\";\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState([]);\n\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        (async function getReviewsInfo() {\n            const reviewsInfo = await getReviews(movieId);\n            setReviews(reviewsInfo);\n        })();\n    }, [movieId])\n\n    return (\n        <ul>\n            {reviews.length !== 0 ? reviews.map(({ id, author, content }) => {\n                return (\n                    <li key={id}>\n                        <h3>Author: {author}</h3>\n                        <p>{content}</p>\n                    </li>\n                )\n            }) : <b>We don't have any reviews for this movie.</b>}\n        </ul>\n    );\n};\n\nexport default Reviews;","import axios from 'axios';\nconst API_KEY = '6d25a4756e0ff1ccca3eba13a74efa5c';\nconst MEDIA_TYPE = 'movie';\nconst TIME_WINDOW = 'day';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3/`;\n\nexport const fetchTrendingToday = async () => {\n  try {\n    const response = await axios.get(`trending/${MEDIA_TYPE}/${TIME_WINDOW}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieById = async movieId => {\n  try {\n    const ID = Number(movieId);\n    const response = await axios.get(`movie/${ID}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getGenres = async (genres = []) => {\n  try {\n    const response = await axios.get(`genre/${MEDIA_TYPE}/list`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    const genreArray = response.data.genres;\n    const genreResult = genreArray.reduce((previousValue, element) => {\n      if (genres.includes(element.id)) {\n        previousValue.push(element.name);\n      }\n      return previousValue;\n    }, []);\n    return genreResult.join(', ');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getCast = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getReviews = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieBySearch = async query => {\n  try {\n    const response = await axios.get(`search/movie`, {\n      params: {\n        api_key: API_KEY,\n        query,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["useState","reviews","setReviews","movieId","useParams","useEffect","getReviews","reviewsInfo","length","map","id","author","content","API_KEY","MEDIA_TYPE","axios","fetchTrendingToday","params","api_key","response","data","results","console","log","getMovieById","ID","Number","getGenres","genres","genreArray","genreResult","reduce","previousValue","element","includes","push","name","join","getCast","cast","getMovieBySearch","query"],"sourceRoot":""}