{"version":3,"file":"static/js/453.b0d8c805.chunk.js","mappings":"gRA0CA,EAtCe,WAAO,IAAD,EACjB,GAAsCA,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BF,EAAAA,EAAAA,UAAQ,UAACG,KAAKC,MAAMC,aAAaC,QAAQ,kBAAjC,QAA+C,IAAnF,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACDV,GAGL,mCAAC,qGAC0BW,EAAAA,EAAAA,IAAiBX,GAD3C,OACSY,EADT,OAEGR,aAAaS,QAAQ,SAAUX,KAAKY,UAAUF,IAC9CL,EAAUK,GAHb,2CAAD,sDAKH,GAAE,CAACZ,IASJ,OACI,kBAAMe,SARW,SAACC,GAClBA,EAAEC,iBACF,IAAMC,EAAaF,EAAEG,OAAOC,MAAMC,MAClCpB,EAAeiB,GACfF,EAAEG,OAAOG,OACZ,EAGG,WACI,kBAAOC,KAAK,OAAOC,KAAK,QAAQC,YAAY,kBAC5C,mBAAQF,KAAK,SAAb,oBACmB,IAAlBjB,EAAOoB,SAAgB,wBACnBpB,EAAOqB,KAAI,YAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MAClB,OACI,yBAAa,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAMxB,GAAlC,SAA+CqB,KAAnDD,EAEhB,QAIZ,C,oOCvCKK,EAAU,mCACVC,EAAa,QAGnBC,IAAAA,SAAAA,QAAA,gCAEO,IAAMC,EAAkB,mCAAG,6GAEPD,IAAAA,IAAA,mBAAsBD,EAAtB,YANP,OAM0D,CACxEG,OAAQ,CACNC,QAASL,KAJiB,cAExBrB,EAFwB,yBAOvBA,EAAS2B,KAAKC,SAPS,gCAS9BC,QAAQC,IAAR,MAT8B,yDAAH,qDAalBC,EAAY,mCAAG,WAAMC,GAAN,yFAElBC,EAAKC,OAAOF,GAFM,SAGDT,IAAAA,IAAA,gBAAmBU,GAAM,CAC9CR,OAAQ,CACNC,QAASL,KALW,cAGlBrB,EAHkB,yBAQjBA,EAAS2B,MARQ,gCAUxBE,QAAQC,IAAR,MAVwB,yDAAH,sDAcZK,EAAS,mCAAG,6GAAOC,EAAP,+BAAgB,GAAhB,kBAEEb,IAAAA,IAAA,gBAAmBD,EAAnB,SAAsC,CAC3DG,OAAQ,CACNC,QAASL,KAJQ,cAEfrB,EAFe,OAOfqC,EAAarC,EAAS2B,KAAKS,OAC3BE,EAAcD,EAAWE,QAAO,SAACC,EAAeC,GAIpD,OAHIL,EAAOM,SAASD,EAAQzB,KAC1BwB,EAAcG,KAAKF,EAAQ7B,MAEtB4B,CACR,GAAE,IAbkB,kBAcdF,EAAYM,KAAK,OAdH,kCAgBrBf,QAAQC,IAAR,MAhBqB,0DAAH,qDAoBTe,EAAO,mCAAG,WAAM7B,GAAN,gGAEIO,IAAAA,IAAA,gBAAmBP,EAAnB,YAAiC,CACtDS,OAAQ,CACNC,QAASL,KAJM,cAEbrB,EAFa,yBAOZA,EAAS2B,KAAKmB,MAPF,gCASnBjB,QAAQC,IAAR,MATmB,yDAAH,sDAaPiB,EAAU,mCAAG,WAAM/B,GAAN,gGAECO,IAAAA,IAAA,gBAAmBP,EAAnB,YAAiC,CACtDS,OAAQ,CACNC,QAASL,KAJS,cAEhBrB,EAFgB,yBAOfA,EAAS2B,KAAKC,SAPC,gCAStBC,QAAQC,IAAR,MATsB,yDAAH,sDAaV/B,EAAgB,mCAAG,WAAMS,GAAN,gGAELe,IAAAA,IAAA,eAA0B,CAC/CE,OAAQ,CACNC,QAASL,EACTb,MAAAA,KALwB,cAEtBR,EAFsB,yBAQrBA,EAAS2B,KAAKC,SARO,gCAU5BC,QAAQC,IAAR,MAV4B,yDAAH,qD","sources":["components/pages/Movies/Movies.jsx","components/services/getMoviesAndInfo.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { getMovieBySearch } from \"components/services/getMoviesAndInfo\";\n\nconst Movies = () => {\n    const [searchQuery, setSearchQuery] = useState('');\n    const [movies, setMovies] = useState(JSON.parse(localStorage.getItem('movies')) ?? []);\n    const location = useLocation();\n\n    useEffect(() => {\n        if (!searchQuery) {\n            return;\n        }\n        (async function getMovies() {\n            const response = await getMovieBySearch(searchQuery);\n            localStorage.setItem('movies', JSON.stringify(response));\n            setMovies(response);\n        })();\n    }, [searchQuery]);\n    \n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const inputValue = e.target.query.value;\n        setSearchQuery(inputValue);\n        e.target.reset();\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" name=\"query\" placeholder=\"Movie search\"/>\n            <button type=\"submit\">Search</button>\n            {movies.length !== 0 && <ul>\n                {movies.map(({id, title}) => {\n                return (\n                    <li key={id}><Link to={`${id}`} state={{ from: location }}>{title}</Link></li>\n                )\n            })}\n            </ul>}\n        </form>\n    )\n};\n\nexport default Movies;","import axios from 'axios';\nconst API_KEY = '6d25a4756e0ff1ccca3eba13a74efa5c';\nconst MEDIA_TYPE = 'movie';\nconst TIME_WINDOW = 'day';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3/`;\n\nexport const fetchTrendingToday = async () => {\n  try {\n    const response = await axios.get(`trending/${MEDIA_TYPE}/${TIME_WINDOW}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieById = async movieId => {\n  try {\n    const ID = Number(movieId);\n    const response = await axios.get(`movie/${ID}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getGenres = async (genres = []) => {\n  try {\n    const response = await axios.get(`genre/${MEDIA_TYPE}/list`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    const genreArray = response.data.genres;\n    const genreResult = genreArray.reduce((previousValue, element) => {\n      if (genres.includes(element.id)) {\n        previousValue.push(element.name);\n      }\n      return previousValue;\n    }, []);\n    return genreResult.join(', ');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getCast = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getReviews = async id => {\n  try {\n    const response = await axios.get(`movie/${id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieBySearch = async query => {\n  try {\n    const response = await axios.get(`search/movie`, {\n      params: {\n        api_key: API_KEY,\n        query,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["useState","searchQuery","setSearchQuery","JSON","parse","localStorage","getItem","movies","setMovies","location","useLocation","useEffect","getMovieBySearch","response","setItem","stringify","onSubmit","e","preventDefault","inputValue","target","query","value","reset","type","name","placeholder","length","map","id","title","to","state","from","API_KEY","MEDIA_TYPE","axios","fetchTrendingToday","params","api_key","data","results","console","log","getMovieById","movieId","ID","Number","getGenres","genres","genreArray","genreResult","reduce","previousValue","element","includes","push","join","getCast","cast","getReviews"],"sourceRoot":""}